/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$arrow-down-name: 'arrow-down';
$arrow-down-x: 0px;
$arrow-down-y: 91px;
$arrow-down-offset-x: 0px;
$arrow-down-offset-y: -91px;
$arrow-down-width: 17px;
$arrow-down-height: 10px;
$arrow-down-total-width: 108px;
$arrow-down-total-height: 101px;
$arrow-down-image: '../img/sprite.png';
$arrow-down: (0px, 91px, 0px, -91px, 17px, 10px, 108px, 101px, '../img/sprite.png', 'arrow-down', );
$cog-name: 'cog';
$cog-x: 48px;
$cog-y: 0px;
$cog-offset-x: -48px;
$cog-offset-y: 0px;
$cog-width: 36px;
$cog-height: 35px;
$cog-total-width: 108px;
$cog-total-height: 101px;
$cog-image: '../img/sprite.png';
$cog: (48px, 0px, -48px, 0px, 36px, 35px, 108px, 101px, '../img/sprite.png', 'cog', );
$inbox-name: 'inbox';
$inbox-x: 0px;
$inbox-y: 45px;
$inbox-offset-x: 0px;
$inbox-offset-y: -45px;
$inbox-width: 36px;
$inbox-height: 36px;
$inbox-total-width: 108px;
$inbox-total-height: 101px;
$inbox-image: '../img/sprite.png';
$inbox: (0px, 45px, 0px, -45px, 36px, 36px, 108px, 101px, '../img/sprite.png', 'inbox', );
$logo-behance-name: 'logo-behance';
$logo-behance-x: 48px;
$logo-behance-y: 70px;
$logo-behance-offset-x: -48px;
$logo-behance-offset-y: -70px;
$logo-behance-width: 19px;
$logo-behance-height: 11px;
$logo-behance-total-width: 108px;
$logo-behance-total-height: 101px;
$logo-behance-image: '../img/sprite.png';
$logo-behance: (48px, 70px, -48px, -70px, 19px, 11px, 108px, 101px, '../img/sprite.png', 'logo-behance', );
$logo-dribbble-name: 'logo-dribbble';
$logo-dribbble-x: 94px;
$logo-dribbble-y: 0px;
$logo-dribbble-offset-x: -94px;
$logo-dribbble-offset-y: 0px;
$logo-dribbble-width: 14px;
$logo-dribbble-height: 13px;
$logo-dribbble-total-width: 108px;
$logo-dribbble-total-height: 101px;
$logo-dribbble-image: '../img/sprite.png';
$logo-dribbble: (94px, 0px, -94px, 0px, 14px, 13px, 108px, 101px, '../img/sprite.png', 'logo-dribbble', );
$logo-facebook-name: 'logo-facebook';
$logo-facebook-x: 94px;
$logo-facebook-y: 23px;
$logo-facebook-offset-x: -94px;
$logo-facebook-offset-y: -23px;
$logo-facebook-width: 9px;
$logo-facebook-height: 15px;
$logo-facebook-total-width: 108px;
$logo-facebook-total-height: 101px;
$logo-facebook-image: '../img/sprite.png';
$logo-facebook: (94px, 23px, -94px, -23px, 9px, 15px, 108px, 101px, '../img/sprite.png', 'logo-facebook', );
$logo-google-name: 'logo-google';
$logo-google-x: 48px;
$logo-google-y: 45px;
$logo-google-offset-x: -48px;
$logo-google-offset-y: -45px;
$logo-google-width: 15px;
$logo-google-height: 15px;
$logo-google-total-width: 108px;
$logo-google-total-height: 101px;
$logo-google-image: '../img/sprite.png';
$logo-google: (48px, 45px, -48px, -45px, 15px, 15px, 108px, 101px, '../img/sprite.png', 'logo-google', );
$monitor-name: 'monitor';
$monitor-x: 0px;
$monitor-y: 0px;
$monitor-offset-x: 0px;
$monitor-offset-y: 0px;
$monitor-width: 38px;
$monitor-height: 35px;
$monitor-total-width: 108px;
$monitor-total-height: 101px;
$monitor-image: '../img/sprite.png';
$monitor: (0px, 0px, 0px, 0px, 38px, 35px, 108px, 101px, '../img/sprite.png', 'monitor', );
$spritesheet-width: 108px;
$spritesheet-height: 101px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($arrow-down, $cog, $inbox, $logo-behance, $logo-dribbble, $logo-facebook, $logo-google, $monitor, );
$spritesheet: (108px, 101px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
